execute pathogen#infect()
syntax on
filetype plugin indent on

autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
     if winnr("$") == 1
      q
     endif
    endif
  endif
endfunction

" Setting VIM theme to the popular solarized theme
syntax enable
set background=dark
"let g:solarized_termtrans=1
"let g:solarized_termcolors=256
"let g:solarized_contrast="high"
"let g:solarized_visibility="high"
"colorscheme solarized
"nnoremap <silent> <F9> :exec "color " .
"    \ ((g:colors_name == "light") ? "twilight" : "light")<CR>

" Ruler
set colorcolumn=80
highlight ColorColumn ctermbg=red ctermfg=white guibg=red guifg=white

let mapleader=','
set autoread                "Reload files outside of vim
set si                      "Set smart indent
set noswapfile
map <Leader>h :nohl<CR>
map <Leader>l <esc>:buffer #<CR>          "Open previous/last buffer

" http://amix.dk/vim/vimrc.html
" " Return to last edit position when opening files (You want this!)
" autocmd BufReadPost *
"      \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
" set viminfo^=%


" Map new lines
map <S-Enter> O<Esc>j
map <CR> o<Esc>k

" Map NERDTreeToggle to Ctrl+d
nmap <silent> <C-D> :NERDTreeToggle<CR>

" Map navigation for easier movements
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <silent> <C-F> :ClearCtrlPCache<CR>

"folding settings
" za` - toggles
" `zc` - closes
" `zo` - opens
" `zR` - open all
" `zM` - close all
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

"copy to system clipboard hack
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>

" Enable Mouse in Vim
"set mouse=a
"set ttymouse=xterm2

" Cursor
"" for iterm
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_SR = "\<Esc>]50;CursorShape=2\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"" For tmux
"let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
"let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

" ================ Plugins ========================
" Fugitive
nnoremap <silent> <leader>ga :Gwrite<CR>
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

" Vim customizations
set listchars=tab:»·,trail:·      
set list
hi SpecialKey ctermbg=white ctermfg=red guibg=white guifg=red
au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" Tabularize
if exists(":Tabularize")
  nmap <Leader>t= :Tabularize /=<CR>
  vmap <Leader>t= :Tabularize /=<CR>
  nmap <Leader>t: :Tabularize /:\zs<CR>
  vmap <Leader>t: :Tabularize /:\zs<CR>
endif

" Elixir
nnoremap <Leader>m :!mix test<CR>

" SparkUp
let g:sparkupExecuteMapping = '<c-y>'

" Snipmates Customizations
" Include more than one snippet set per file type
let g:snipMate.scope_aliases['eelixir'] = 'eelixir,html'
