set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" My Plugins
Plugin 'airblade/vim-gitgutter'
Plugin 'ap/vim-css-color'
Plugin 'bling/vim-airline'
Plugin 'BjRo/vim-extest'
Plugin 'Chun-Yang/vim-action-ag'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'danro/rename.vim'
Plugin 'elixir-lang/vim-elixir'
Plugin 'ervandew/supertab'
Plugin 'garbas/vim-snipmate'
Plugin 'godlygeek/tabular'
Plugin 'honza/vim-snippets'
"Plugin 'jiangmiao/auto-pairs'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'junegunn/vim-easy-align'
Plugin 'luochen1990/rainbow'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
Plugin 'ngmy/vim-rubocop'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'rizzatti/dash.vim'
Plugin 'rking/ag.vim'
Plugin 'schickling/vim-bufonly'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tomtom/tlib_vim'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-scripts/ruby-matchit'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

syntax on           " Syntax Highlighting
syntax enable
set background=dark
set si              " Smart Indent
set noswapfile
set autoread        " Reload files outside of vim
set mouse=a         " Enable mouse in vim
set ttymouse=xterm2 " More mouse control
set tabstop=2
set shiftwidth=2    " when indenting with '>', use 4 spaces width
set expandtab       " On pressing tab, insert 4 spaces
set number
set t_Co=256
"let g:ctrlp_user_command = 0

" Spelling
"set nospell
hi clear SpellBad
hi SpellBad cterm=underline ctermbg=red ctermfg=white
"autocmd BufRead,BufNewFile *.md setlocal spell
"autocmd FileType gitcommit setlocal spell

" Folded
hi Folded ctermbg=gray ctermfg=white

"hi TabLineFill ctermfg=Gray ctermbg=Black
"hi TabLine ctermfg=Gray ctermbg=Black
"hi TabLineSel ctermfg=Black ctermbg=White

" Theme
colorscheme slate
let mapleader=','

" Airline Configuration
set laststatus=2 " Always show status line
let g:airline_powerline_fonts = 1

" Rainbox Parens
let g:rainbow_active = 1

" Copy and Paste
vnoremap <silent> <Leader>y "*y
if !exists('$TMUX')
  set clipboard=unnamed
endif

" Highlighting
" hi Search ctermfg=Black
" Clear last search highlighting
noremap <Space> :set hlsearch!<cr>
hi Search ctermbg=yellow ctermfg=black

" Ruler
"set colorcolumn=80

" NERDTreeToggle to Ctrl+d
nmap <silent> <C-D> :NERDTreeToggle<CR>

" Map navigation for easier movements
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Cursor
" for iterm
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_SR = "\<Esc>]50;CursorShape=2\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" For tmux
"let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
"let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

" Fugitive
nnoremap <silent> <leader>ga :Gwrite<CR>
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

"folding settings
" za` - toggles
" `zc` - closes
" `zo` - opens
" `zR` - open all
" `zM` - close all
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" Map new lines
map <S-Enter> O<Esc>j
"map <CR> o<Esc>k

" Trailing Whitespace
set listchars=tab:»·,trail:·      
set list
hi SpecialKey ctermbg=white ctermfg=red guibg=white guifg=red
au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" Gist Vim
let g:gist_post_private = 1

" Escape is too far away
:imap jk <Esc>
" Snippets
"let g:snipMate.scope_aliases['eelixir'] = 'html, eelixir'

" RSpec.vim mappings
noremap <Leader>t :call RunCurrentSpecFile()<CR>
noremap <Leader>s :call RunNearestSpec()<CR>
noremap <Leader>l :call RunLastSpec()<CR>
noremap <Leader>a :call RunAllSpecs()<CR>


" Vim Dash
nmap <silent> <leader>d <Plug>DashSearch

" Vim ExTest
" TODO: Add only for elixir filetype
autocmd FileType elixir map <leader>m :ExTestRunFile<CR>
"map <leader>T :ExTestRunFile<CR>
"map <leader>t :ExTestRunMethod<CR>
"map <leader>lt :ExTestRunLast<CR>

if exists(":Tabularize")
  nmap <Leader>= :Tabularize /=<CR>
  vmap <Leader>= :Tabularize /=<CR>
endif

" Markdown
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" Vim Indent Guides
"let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

"""""""""""""""
" CoverMyMeds
"""""""""""""""
source ~/.workvimrc

" Use The Silver Searcher if available, else ack
" http://robots.thoughtbot.com/faster-grepping-in-vim
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " I haven't set up my gitignore enough for this to not sure dotfiles
  "let g:ctrlp_user_command = 'ag -Q  -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
else
  " it's better than grep
  set grepprg=ack
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

"Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
